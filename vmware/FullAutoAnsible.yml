---
- name: Provision Virtual Machines using pyVmomi
  hosts: localhost
  gather_facts: False
  connection: local

  #Virtual machine name "use input"
  vars_prompt:
    - name: "vmname"
      prompt: "VM Name:"
      private: no

  #Variables - should be dynamic based on the resources of vcenter hosts
  #and we can use external file as a variable
  vars:
    vcenter_hostname: '10.203.137.201'
    vcenter_user: 'dslabs@vsphere.local'
    vcenter_pass: 'Hqlocal1'
    vmtemplate: ''
    new_port: 22
    inventory_dir: '/etc/ansible/hosts'
    ansible_ssh_user: 'root'
    ansible_ssh_pass: '12345'
    ansible_become_user: 'root'
    ansible_become_pass: '12345'
    ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
    esxi: '10.203.202.2'
    datacenter: 'Ottawa QA Server'
    #Task should run in this sequence:
    #1- Gather All facts about all virtual machines in Vcenter to check later
    #if the machine name exists or not by uuid
    #2- if the machine exits add it to Dynamic inventory and run our commands
    #3- if it not exist you sholud create on or clone from a current template
    #4- if you will create a new on it will need to automate the installation OS
    #i used embedded customized ISO image file with kickstart file and remaster the iso with the kisckfile
    #5- Problem: "Create VM and Install OS": we are not able to check if the VM finished installation or not.
    #6- assumeing that we are able to check we need to get the ip of the machine
    #7- Problem: we have a problem with the NIC it ddoesn't boot and take ip we check connect it manully.
    #8- assuming that we are able to get the IP of the machine we should add this ip based on the the Applicaiton to Dynamic Inventory.
    #we have two methods to do it first on using "Python script as a dynamic inventory to get all VM from Our Dynamic Inventory Source 'Vcenter' it is more effective on larger scale environment"
    #the other method that i used is ansible dynamic host file which cache the ip of VM based on the group and run the commends.
    #9- run you command and install your application.
    #
    #
    #Notes: Gather facts to get uuid. ansible must be 2.5
    #Gather facts take time depending on how many machines on your vcenter.
    #so if you have many VMs it will take many time may  be 20 - 25 mins
    #
  tasks:
          # - name: Gather Facts of all VMs in Virtual Center or ESXi.
          #local_action:
          # module: vmware_vm_facts
          # hostname: "{{ vcenter_hostname }}"
          #username: "{{ vcenter_user }}"
          #password: "{{ vcenter_pass }}"
          #validate_certs: False
          #delegate_to: localhost
          #register: facts

          #debug: var=facts

          # - name: Check if virtual machine name exists and Verbose UUID
          # debug:
          #msg: "{{ item.name }}: {{ facts['virtual_machines']['%s'| format(item.name)]['uuid'] }}"
          #with_items:
          #- { name: Centos-KS-AI-Demo}
          #ignore_errors: true
          #register: uuid


  - name: Create the VM
    vmware_guest:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_user  }}'
      password: '{{ vcenter_pass }}'
      validate_certs: False
      esxi_hostname: '{{ esxi }}'
      datacenter: '{{ datacenter }}'
      folder: Suraj
      name: '{{ vmname }}'
      state: poweredon
      guest_id: centos64Guest
      disk:
      - size_gb: 100
        type: thin
        datastore: R5-LDS03
      networks:
      - name: VM Network
        type: dhcp
      hardware:
        memory_mb: 4096
        num_cpus: 2
      cdrom:
        type: "iso"
        iso_path: "[R5-LDS03] ISO/centos7-ks-Final.iso"
      customization:
        dns_servers:
        - 8.8.8.8
        - 8.8.8.8
    register: newvmdeploy
    #when: uuid|failed
  - debug: var=newvmdeploy

  #- name: Clone a template from New VM
  #vmware_guest:
  #hostname: 10.203.137.201
  #username: dslabs@vsphere.local
  #password:
  #validate_certs: no
  #datacenter: Ottawa
  #state: present
  #folder: Suj
  #guest_id: centos64Guest
  #name: centos7x64
  #template: Centos-KS-AI
  #is_template: true
  #register: deploy

  - name: show deploy
    debug:
      msg: "{{ deploy }}"

  #- name: Clone vm from template VM
  #vmware_guest:
  #hostname: 10.203.137.201
  #username: dslabs@vsphere.local
  #password: Hqlocal1
  #datacenter: Ottawa QA Server
  #folder: Suraj
  #template: centos7x64
  #validate_certs: no
  #name: CentosTMP
  #state: poweredon
  #guest_id: centos64Guest
  #disk:
  #- size_gb: 100
  #type: thin
  #datastore: R5-LDS03
  #networks:
  #- name: VM Network
  #ip: 10.10.10.2
  #netmask: 255.255.255.0
  #gateway: 10.10.10.1
  #dns_servers:
  #- 8.8.8.8
  #- 8.8.8.8
  #hardware:
  #memory_mb: 4096
  #num_cpus: 2
  #customization:
  #dns_servers:
  #- 8.8.8.8
  #- 8.8.8.8
  #register: deploy
  #when: uuid|failed

      #- name: Gather facts for new devices, if they have been cloned
      #local_action:
      #module: vmware_vm_facts
      #hostname: "{{ vcenter_hostname }}"
      #username: "{{ vcenter_user }}"
      #password: "{{ vcenter_pass }}"
      #validate_certs: False
      #register: facts
      #when: newvmdeploy|succeeded
    
  - name: Add Existing VM to dynamic inventory for further tasks
    add_host:
      name: "{{ item.name }}"
      group: "{{ item.services }}"
      ansible_ssh_host: "{{ facts['virtual_machines']['%s' | format(item.name)]['ip_address']  }}"
      #ansible_ssh_host: 10.202.203.161
      ansible_ssh_port: "{{ new_port }}"
      inventory_dir: "{{ inventory_dir }}"
      ansible_ssh_user: "{{ ansible_ssh_user }}"
      ansible_ssh_pass: "{{ ansible_ssh_pass }}"
      ansible_become_user: "{{ ansible_become_user }}"
      ansible_become_pass: "{{ ansible_become_pass }}"
      ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
    changed_when: false
    with_items:
            - { name: Centos-KS-AI-Demo, services: dsa }
    register: host
  - debug: var=host

  - name: Download Application
    hosts: dsa
    get_url:
      url: https://files.trendmicro.com/products/deepsecurity/en/11.0/Agent-RedHat_EL7-11.0.0-211.x86_64.zip
      dest: ~/Downloads/Agent-RedHat_EL7-11.0.0-211.x86_64.zip
      mode: 0777

  - name: start APP Service
    command: systemctl start ds_agent
    register: result

  - debug:
      msg: "{{ result }}"

  - name: Verify APP Service
    command: systemctl status ds_agent
    register: result

  - debug:
      msg: "{{ result.stdout_lines[2] }}"

